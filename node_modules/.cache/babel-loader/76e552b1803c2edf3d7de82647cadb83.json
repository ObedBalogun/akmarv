{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst spec = morx.spec().build('id', 'required:true, eg:a1b7864f-c56d-4453-bf55-a08db4acb5fe').build('status_action', 'required:true, eg:block').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    params.method = \"PUT\";\n    var uri = `v3/virtual-cards/${params.id}/status/${params.status_action}`;\n    return _rave.request(uri, params);\n  }).then(response => {\n    d.resolve(response.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/virtual-cards/rave.block_unblock.js"],"names":["morx","require","q","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","params","then","method","uri","id","status_action","request","response","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AACA,MAAME,IAAI,GAAGH,IAAI,CAACG,IAAL,GACXC,KADW,CACL,IADK,EACC,wDADD,EAEXA,KAFW,CAEL,eAFK,EAEY,yBAFZ,EAGXC,GAHW,EAAb;;AAKA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAE7B,MAAIC,CAAC,GAAGP,CAAC,CAACQ,KAAF,EAAR;AAEAR,EAAAA,CAAC,CAACS,KAAF,CAAQ,MAAM;AAEZ,QAAIC,SAAS,GAAGZ,IAAI,CAACa,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,CAAhB;AACA,QAAIC,MAAM,GAAGH,SAAS,CAACG,MAAvB;AACA,WAAOA,MAAP;AACA,GALF,EAMEC,IANF,CAMOD,MAAM,IAAI;AACfA,IAAAA,MAAM,CAACE,MAAP,GAAgB,KAAhB;AACA,QAAIC,GAAG,GAAI,oBAAmBH,MAAM,CAACI,EAAG,WAAUJ,MAAM,CAACK,aAAc,EAAvE;AACA,WAAOZ,KAAK,CAACa,OAAN,CAAcH,GAAd,EAAmBH,MAAnB,CAAP;AAEA,GAXF,EAYEC,IAZF,CAYOM,QAAQ,IAAI;AAEjBb,IAAAA,CAAC,CAACc,OAAF,CAAUD,QAAQ,CAACE,IAAnB;AACA,GAfF,EAgBEC,KAhBF,CAgBQC,GAAG,IAAI;AAEbjB,IAAAA,CAAC,CAACkB,MAAF,CAASD,GAAT;AACA,GAnBF;AAqBA,SAAOjB,CAAC,CAACmB,OAAT;AACA;;AACDtB,OAAO,CAACuB,OAAR,GAAkB1B,IAAlB;AACA2B,MAAM,CAACC,OAAP,GAAiBzB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\nconst spec = morx.spec()\n\t.build('id', 'required:true, eg:a1b7864f-c56d-4453-bf55-a08db4acb5fe')\n\t.build('status_action', 'required:true, eg:block')\n\t.end();\n\nfunction service(data, _rave) {\n\n\tvar d = q.defer();\n\n\tq.fcall(() => {\n\n\t\t\tvar validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n\t\t\tvar params = validated.params;\n\t\t\treturn params\n\t\t})\n\t\t.then(params => {\n\t\t\tparams.method = \"PUT\";\n\t\t\tvar uri = `v3/virtual-cards/${params.id}/status/${params.status_action}`\n\t\t\treturn _rave.request(uri, params)\n\n\t\t})\n\t\t.then(response => {\n\n\t\t\td.resolve(response.body);\n\t\t})\n\t\t.catch(err => {\n\n\t\t\td.reject(err);\n\t\t})\n\n\treturn d.promise;\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}