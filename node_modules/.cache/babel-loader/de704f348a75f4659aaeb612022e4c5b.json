{"ast":null,"code":"// import $ from 'jquery';\n//\n//\n// function getCookie(name) {\n//             var cookieValue = null;\n//             if (document.cookie && document.cookie !== '') {\n//                 var cookies = document.cookie.split(';');\n//                 for (var i = 0; i < cookies.length; i++) {\n//                     var cookie = cookies[i].trim();\n//                     // Does this cookie string begin with the name we want?\n//                     if (cookie.substring(0, name.length + 1) === (name + '=')) {\n//                         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n//                         break;\n//                     }\n//                 }\n//             }\n//             return cookieValue;\n//         }\n//\n// export function backendLookup(method, endpoint, callback, data) {\n//     let jsonData;\n//\n//     const csrftoken = getCookie('csrftoken');\n//\n//     function csrfSafeMethod(method) {\n//         return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method))\n//     }\n//\n//\n//     if (data) {\n//         jsonData = JSON.stringify(data)\n//     }\n//     if (method === 'GET') {\n//         $.ajaxSetup({\n//             beforeSend: function (xhr, settings) {\n//                 if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n//                     xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n//                 }\n//             }\n//         })\n//\n//         $.ajax({\n//             url: endpoint,\n//             data: data,\n//             type: method,\n//             dataType: \"json\",\n//             success: function (xhr) {\n//                 callback(xhr.data, xhr.status)\n//             },\n//             error: function (e) {\n//                 console.log(e)\n//                 callback({\"message\": \"The request was an error\"}, 400)\n//             }\n//\n//         });\n//\n//     }\n//     if (method === 'POST'){\n//         $.ajaxSetup({\n//             beforeSend: function (xhr, settings) {\n//                 if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n//                     xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n//                 }\n//             }\n//         })\n//\n//         $.ajax({\n//             url: endpoint,\n//             data: data,\n//             type: method,\n//             dataType: \"json\",\n//             success: function (xhr){\n//                 callback(xhr.data, xhr.status)\n//                 console.log(xhr.status)\n//             },\n//             error: function (e) {\n//                 console.log(e)\n//                 callback({\"message\": \"The request was an error\"}, 400)\n//             }\n//\n//         });\n//\n//     }\n// }\n//\n// export function backendAuthentication(method, endpoint, callback, data){\n//\n//     const csrftoken = getCookie('csrftoken');\n//\n//     function csrfSafeMethod(method) {\n//         return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method))\n//     }\n//     $.ajaxSetup({\n//         beforeSend: function (xhr, settings) {\n//             if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n//                 xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n//             }\n//         }\n//     })\n//\n//     $.ajax({\n//         url: endpoint,\n//         data: data,\n//         type: method,\n//         dataType: \"json\",\n//         success: function (xhr) {\n//             callback(xhr)\n//         },\n//         error: function (e) {\n//             console.log(e)\n//             callback({\"message\": \"The request was an error\"}, 400)\n//         }\n//\n//     });\n//\n//\n// }\n//\n//\n//","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv/src/lookup/components.js"],"names":[],"mappingssourcesContent":["// import $ from 'jquery';\r\n//\r\n//\r\n// function getCookie(name) {\r\n//             var cookieValue = null;\r\n//             if (document.cookie && document.cookie !== '') {\r\n//                 var cookies = document.cookie.split(';');\r\n//                 for (var i = 0; i < cookies.length; i++) {\r\n//                     var cookie = cookies[i].trim();\r\n//                     // Does this cookie string begin with the name we want?\r\n//                     if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n//                         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n//                         break;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             return cookieValue;\r\n//         }\r\n//\r\n// export function backendLookup(method, endpoint, callback, data) {\r\n//     let jsonData;\r\n//\r\n//     const csrftoken = getCookie('csrftoken');\r\n//\r\n//     function csrfSafeMethod(method) {\r\n//         return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method))\r\n//     }\r\n//\r\n//\r\n//     if (data) {\r\n//         jsonData = JSON.stringify(data)\r\n//     }\r\n//     if (method === 'GET') {\r\n//         $.ajaxSetup({\r\n//             beforeSend: function (xhr, settings) {\r\n//                 if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\r\n//                     xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n//                 }\r\n//             }\r\n//         })\r\n//\r\n//         $.ajax({\r\n//             url: endpoint,\r\n//             data: data,\r\n//             type: method,\r\n//             dataType: \"json\",\r\n//             success: function (xhr) {\r\n//                 callback(xhr.data, xhr.status)\r\n//             },\r\n//             error: function (e) {\r\n//                 console.log(e)\r\n//                 callback({\"message\": \"The request was an error\"}, 400)\r\n//             }\r\n//\r\n//         });\r\n//\r\n//     }\r\n//     if (method === 'POST'){\r\n//         $.ajaxSetup({\r\n//             beforeSend: function (xhr, settings) {\r\n//                 if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\r\n//                     xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n//                 }\r\n//             }\r\n//         })\r\n//\r\n//         $.ajax({\r\n//             url: endpoint,\r\n//             data: data,\r\n//             type: method,\r\n//             dataType: \"json\",\r\n//             success: function (xhr){\r\n//                 callback(xhr.data, xhr.status)\r\n//                 console.log(xhr.status)\r\n//             },\r\n//             error: function (e) {\r\n//                 console.log(e)\r\n//                 callback({\"message\": \"The request was an error\"}, 400)\r\n//             }\r\n//\r\n//         });\r\n//\r\n//     }\r\n// }\r\n//\r\n// export function backendAuthentication(method, endpoint, callback, data){\r\n//\r\n//     const csrftoken = getCookie('csrftoken');\r\n//\r\n//     function csrfSafeMethod(method) {\r\n//         return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method))\r\n//     }\r\n//     $.ajaxSetup({\r\n//         beforeSend: function (xhr, settings) {\r\n//             if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\r\n//                 xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n//             }\r\n//         }\r\n//     })\r\n//\r\n//     $.ajax({\r\n//         url: endpoint,\r\n//         data: data,\r\n//         type: method,\r\n//         dataType: \"json\",\r\n//         success: function (xhr) {\r\n//             callback(xhr)\r\n//         },\r\n//         error: function (e) {\r\n//             console.log(e)\r\n//             callback({\"message\": \"The request was an error\"}, 400)\r\n//         }\r\n//\r\n//     });\r\n//\r\n//\r\n// }\r\n//\r\n//\r\n//\r\n"]},"metadata":{},"sourceType":"module"}