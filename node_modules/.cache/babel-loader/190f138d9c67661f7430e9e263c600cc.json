{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst spec = morx.spec().build('email', 'required:true, eg:ade_temi@icloud.com').build('is_permanent', 'required:false, eg:true').build('accounts', 'required:false, eg:5').build('tx_ref', 'required:true, eg:jhn-mdkn-10192029920').build('amount', 'required:false, eg:5000').end();\n\nfunction service(data, _rave) {\n  const d = q.defer();\n  q.fcall(() => {\n    const validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n    const params = validated.params;\n    return params;\n  }).then(params => {\n    params.method = \"POST\";\n    return _rave.request('v3/bulk-virtual-account-numbers', params);\n  }).then(response => {\n    // console.log(response);\n    d.resolve(response.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/virtual-account/rave.create.bulk.js"],"names":["morx","require","q","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","params","then","method","request","response","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AAEA,MAAME,IAAI,GAAGH,IAAI,CAACG,IAAL,GAERC,KAFQ,CAEF,OAFE,EAEO,uCAFP,EAGRA,KAHQ,CAGF,cAHE,EAGc,yBAHd,EAIRA,KAJQ,CAIF,UAJE,EAIU,sBAJV,EAKRA,KALQ,CAKF,QALE,EAKQ,wCALR,EAMRA,KANQ,CAMF,QANE,EAMQ,yBANR,EAORC,GAPQ,EAAb;;AASA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAG1B,QAAMC,CAAC,GAAGP,CAAC,CAACQ,KAAF,EAAV;AAEAR,EAAAA,CAAC,CAACS,KAAF,CAAQ,MAAM;AAEN,UAAMC,SAAS,GAAGZ,IAAI,CAACa,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,CAAlB;AACA,UAAMC,MAAM,GAAGH,SAAS,CAACG,MAAzB;AAGA,WAAOA,MAAP;AAGH,GATL,EAUKC,IAVL,CAUUD,MAAM,IAAI;AAEZA,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAhB;AACA,WAAOT,KAAK,CAACU,OAAN,CAAc,iCAAd,EAAiDH,MAAjD,CAAP;AACH,GAdL,EAeKC,IAfL,CAeUG,QAAQ,IAAI;AAEd;AACAV,IAAAA,CAAC,CAACW,OAAF,CAAUD,QAAQ,CAACE,IAAnB;AAEH,GApBL,EAqBKC,KArBL,CAqBWC,GAAG,IAAI;AAEVd,IAAAA,CAAC,CAACe,MAAF,CAASD,GAAT;AAEH,GAzBL;AA2BA,SAAOd,CAAC,CAACgB,OAAT;AAIH;;AACDnB,OAAO,CAACoB,OAAR,GAAkBvB,IAAlB;AACAwB,MAAM,CAACC,OAAP,GAAiBtB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\n\nconst spec = morx.spec()\n\n    .build('email', 'required:true, eg:ade_temi@icloud.com')\n    .build('is_permanent', 'required:false, eg:true')\n    .build('accounts', 'required:false, eg:5')\n    .build('tx_ref', 'required:true, eg:jhn-mdkn-10192029920')\n    .build('amount', 'required:false, eg:5000')\n    .end();\n\nfunction service(data, _rave) {\n\n\n    const d = q.defer();\n\n    q.fcall(() => {\n\n            const validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n            const params = validated.params;\n\n\n            return params;\n\n\n        })\n        .then(params => {\n\n            params.method = \"POST\";\n            return _rave.request('v3/bulk-virtual-account-numbers', params)\n        })\n        .then(response => {\n\n            // console.log(response);\n            d.resolve(response.body);\n\n        })\n        .catch(err => {\n\n            d.reject(err);\n\n        })\n\n    return d.promise;\n\n\n\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}