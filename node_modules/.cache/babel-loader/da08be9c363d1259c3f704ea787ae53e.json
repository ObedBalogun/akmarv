{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst spec = morx.spec().build('amount', 'required:true, eg:3000.50').build('order_id', 'required:true, eg:BPUSSD1588268275502326').build('reference', 'required:true, eg:FLWTTOT1024e200000029').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {\n      throw_error: true\n    });\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    params.method = \"PUT\";\n    return _rave.request(`v3/product-orders/${params.reference}`, params);\n  }).then(resp => {\n    d.resolve(resp.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/bills/rave.update-bills.order.js"],"names":["morx","require","q","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","throw_error","params","then","method","request","reference","resp","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AAGA,MAAME,IAAI,GAAGH,IAAI,CAACG,IAAL,GACXC,KADW,CACL,QADK,EACK,2BADL,EAEXA,KAFW,CAEL,UAFK,EAEO,0CAFP,EAGXA,KAHW,CAGL,WAHK,EAGQ,yCAHR,EAIXC,GAJW,EAAb;;AAQA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAE7B,MAAIC,CAAC,GAAGP,CAAC,CAACQ,KAAF,EAAR;AACAR,EAAAA,CAAC,CAACS,KAAF,CAAQ,MAAM;AAEZ,QAAIC,SAAS,GAAGZ,IAAI,CAACa,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,EAA8C;AAACC,MAAAA,WAAW,EAAC;AAAb,KAA9C,CAAhB;AACA,QAAIC,MAAM,GAAGJ,SAAS,CAACI,MAAvB;AAEA,WAAQA,MAAR;AAEA,GAPF,EAQEC,IARF,CAQOD,MAAM,IAAI;AAGfA,IAAAA,MAAM,CAACE,MAAP,GAAgB,KAAhB;AACA,WAAOV,KAAK,CAACW,OAAN,CAAe,qBAAoBH,MAAM,CAACI,SAAU,EAApD,EAAuDJ,MAAvD,CAAP;AACA,GAbF,EAcEC,IAdF,CAcOI,IAAI,IAAI;AAEbZ,IAAAA,CAAC,CAACa,OAAF,CAAUD,IAAI,CAACE,IAAf;AAEA,GAlBF,EAmBEC,KAnBF,CAmBQC,GAAG,IAAI;AAEbhB,IAAAA,CAAC,CAACiB,MAAF,CAASD,GAAT;AAEA,GAvBF;AAyBA,SAAOhB,CAAC,CAACkB,OAAT;AAEA;;AACDrB,OAAO,CAACsB,OAAR,GAAkBzB,IAAlB;AACA0B,MAAM,CAACC,OAAP,GAAiBxB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\n\n\nconst spec = morx.spec()\n\t.build('amount', 'required:true, eg:3000.50')\n\t.build('order_id', 'required:true, eg:BPUSSD1588268275502326')\n\t.build('reference', 'required:true, eg:FLWTTOT1024e200000029')\n\t.end();\n\n\n\nfunction service(data, _rave) {\n\n\tvar d = q.defer();\n\tq.fcall(() => {\n\n\t\t\tvar validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {throw_error:true});\n\t\t\tvar params = validated.params;\n\n\t\t\treturn (params);\n\n\t\t})\n\t\t.then(params => {\n\n\n\t\t\tparams.method = \"PUT\"\n\t\t\treturn _rave.request(`v3/product-orders/${params.reference}`, params)\n\t\t})\n\t\t.then(resp => {\n\n\t\t\td.resolve(resp.body);\n\n\t\t})\n\t\t.catch(err => {\n\n\t\t\td.reject(err);\n\n\t\t});\n\n\treturn d.promise;\n\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}