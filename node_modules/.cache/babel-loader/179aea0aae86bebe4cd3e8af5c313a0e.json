{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nvar spec = morx.spec().build('id', 'required:true, eg:957764').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n    var params = {};\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    // params.seckey = _rave.getSecretKey();\n    params.method = \"GET\";\n    return _rave.request(`v3/transactions/${params.id}/events`, params);\n  }).then(response => {\n    // console.log(response);\n    d.resolve(response.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/transactions/rave.events.js"],"names":["morx","require","q","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","params","then","method","request","id","response","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AAKA,IAAIE,IAAI,GAAGH,IAAI,CAACG,IAAL,GAENC,KAFM,CAEA,IAFA,EAEM,0BAFN,EAGNC,GAHM,EAAX;;AAKA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAG1B,MAAIC,CAAC,GAAGP,CAAC,CAACQ,KAAF,EAAR;AAEAR,EAAAA,CAAC,CAACS,KAAF,CAAQ,MAAM;AAEN,QAAIC,SAAS,GAAGZ,IAAI,CAACa,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,CAAhB;AAEA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIA,MAAM,GAAGH,SAAS,CAACG,MAAvB;AAEA,WAAOA,MAAP;AAGH,GAVL,EAWKC,IAXL,CAWUD,MAAM,IAAI;AAIZ;AACAA,IAAAA,MAAM,CAACE,MAAP,GAAgB,KAAhB;AACA,WAAOT,KAAK,CAACU,OAAN,CAAe,mBAAkBH,MAAM,CAACI,EAAG,SAA3C,EAAqDJ,MAArD,CAAP;AACH,GAlBL,EAmBKC,IAnBL,CAmBUI,QAAQ,IAAI;AAEd;AACAX,IAAAA,CAAC,CAACY,OAAF,CAAUD,QAAQ,CAACE,IAAnB;AAGH,GAzBL,EA0BKC,KA1BL,CA0BWC,GAAG,IAAI;AAEVf,IAAAA,CAAC,CAACgB,MAAF,CAASD,GAAT;AAEH,GA9BL;AAgCA,SAAOf,CAAC,CAACiB,OAAT;AAIH;;AACDpB,OAAO,CAACqB,OAAR,GAAkBxB,IAAlB;AACAyB,MAAM,CAACC,OAAP,GAAiBvB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\n\n\n\n\nvar spec = morx.spec()\n\n    .build('id', 'required:true, eg:957764')\n    .end();\n\nfunction service(data, _rave) {\n\n\n    var d = q.defer();\n\n    q.fcall(() => {\n           \n            var validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n         \n            var params = {}\n            var params = validated.params;\n\n            return params;\n\n\n        })\n        .then(params => {\n\n\n\n            // params.seckey = _rave.getSecretKey();\n            params.method = \"GET\"\n            return _rave.request(`v3/transactions/${params.id}/events`, params)\n        })\n        .then(response => {\n\n            // console.log(response);\n            d.resolve(response.body);\n\n\n        })\n        .catch(err => {\n\n            d.reject(err);\n\n        })\n\n    return d.promise;\n\n\n\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}