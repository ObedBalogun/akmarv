{"ast":null,"code":"var MoscBase = function (evaluation_context_dictionary) {\n  this.eval_ctx_dict = evaluation_context_dictionary;\n  this.baseObject = {};\n  this.noMoreBuild = false;\n\n  function emptyCheck(value, message) {\n    if (typeof value == 'undefined' || !value) {\n      throw new Error(message);\n    }\n  }\n\n  this.parse_properties = function (key, properties, baseObject, eval_dict) {\n    function get_eval_string(path) {\n      var eval_prop = path.match(/\\*([a-zA-Z_0-9]+)\\*/)[1];\n      return 'eval_dict[\"' + eval_prop + '\"]' + path.replace(/\\*[a-zA-Z_0-9]+\\*/, '');\n    }\n\n    var propertyBase = {};\n\n    if (properties) {\n      baseObject[key] = baseObject[key] || {};\n      propertyBase = baseObject[key];\n    } else {\n      propertyBase = baseObject;\n      properties = key;\n    }\n\n    properties = properties.split(',');\n    var properties_length = properties.length;\n    var property_parts = null;\n\n    for (var i = 0; i < properties_length; i++) {\n      properties[i] = properties[i].trim();\n      property_parts = properties[i].split(':');\n      emptyCheck(property_parts[0], 'Invalid key:value pair passed');\n      emptyCheck(property_parts[1], 'Invalid key:value pair passed');\n      property_parts[0] = property_parts[0].trim();\n      var pvalue = property_parts[1].trim();\n\n      if (pvalue.indexOf('*') < 0) {\n        propertyBase[property_parts[0]] = pvalue;\n      } else {\n        try {\n          propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));\n        } catch (e) {\n          throw new Error('Context not found in eval_dict');\n        }\n      }\n    }\n\n    return baseObject;\n  };\n\n  this.build = function (property_key, properties) {\n    emptyCheck(property_key, 'No prop key passed');\n    properties = properties || null;\n    this.parse_properties(property_key, properties, this.baseObject, this.eval_ctx_dict);\n    return this.noMoreBuild ? this.baseObject : this;\n  };\n\n  this.buildIn = function (depth_path, properties) {\n    emptyCheck(depth_path, 'No object path passed');\n    var paths = depth_path.split('.');\n    var buildBase = this.baseObject;\n\n    for (x = 0; x < paths.length; x++) {\n      if (buildBase[paths[x]]) {\n        //Only build when path is an object. x:'string' should fail\n        if (typeof buildBase[paths[x]] == 'object') {\n          buildBase = buildBase[paths[x]];\n        } else {\n          throw new Error('Path not an object');\n        }\n      } else {\n        buildBase = buildBase[paths[x]] = {};\n      }\n    } //If properties are passed, populate new object.\n\n\n    if (properties) {\n      this.parse_properties(properties, null, buildBase, this.eval_ctx_dict);\n    }\n\n    return this.noMoreBuild ? this.baseObject : this;\n  };\n\n  this.end = function () {\n    this.noMoreBuild = true;\n    return this.baseObject;\n  };\n};\n\nmodule.exports = MoscBase;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/mosc/mosc.js"],"names":["MoscBase","evaluation_context_dictionary","eval_ctx_dict","baseObject","noMoreBuild","emptyCheck","value","message","Error","parse_properties","key","properties","eval_dict","get_eval_string","path","eval_prop","match","replace","propertyBase","split","properties_length","length","property_parts","i","trim","pvalue","indexOf","eval","e","build","property_key","buildIn","depth_path","paths","buildBase","x","end","module","exports"],"mappings":"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","sourcesContent":["var MoscBase = function (evaluation_context_dictionary)\n{\n\tthis.eval_ctx_dict = evaluation_context_dictionary;\n\tthis.baseObject    = {};\n\tthis.noMoreBuild   = false;\n\n\tfunction emptyCheck(value, message)\n\t{\n\t\tif(typeof value == 'undefined' || !value){\n\t\t\tthrow new Error(message)\n\t\t}\n\t}\n\n\tthis.parse_properties = function (key, properties, baseObject, eval_dict)\n\t{\n\t\tfunction get_eval_string(path) {\n\t\t\tvar eval_prop = path.match(/\\*([a-zA-Z_0-9]+)\\*/)[1];\n\t\t\treturn 'eval_dict[\"'+eval_prop+'\"]' + path.replace(/\\*[a-zA-Z_0-9]+\\*/, '');\n\t\t}\n\n\t\tvar propertyBase      = {}; \n\t\tif(properties){ \n\t\t   baseObject[key] = baseObject[key] || {}; \n\t\t   propertyBase         = baseObject[key];\n\t    }else{\n\t    \tpropertyBase = baseObject;\n\t    \tproperties = key;\n\t    }\n\t\tproperties            = properties.split(',');\n\t\tvar properties_length = properties.length;\n\t\tvar property_parts    = null;\n\n\t\tfor(var i = 0; i < properties_length; i++)\n\t\t{\n\t\t\tproperties[i]     = properties[i].trim();\n\t\t    property_parts    = properties[i].split(':');\n\n\t\t    emptyCheck(property_parts[0], 'Invalid key:value pair passed');\n\t\t    emptyCheck(property_parts[1], 'Invalid key:value pair passed');\n\n\t\t    property_parts[0] = property_parts[0].trim();\n\t\t    var pvalue        = property_parts[1].trim();\n\t\t    if(pvalue.indexOf('*') < 0){\n\t\t    \tpropertyBase[property_parts[0]] = pvalue;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t    \ttry\n\t\t    \t{\n\t\t    \t\tpropertyBase[property_parts[0]] = eval(get_eval_string(pvalue));\n\t\t    \t}\n\t\t    \tcatch(e)\n\t\t    \t{\n\t\t    \t\tthrow new Error('Context not found in eval_dict');\n\t\t    \t}\n\n\t\t    }\n\t\t\t  \n\t\t} \n\t\treturn baseObject;\n\t}\n\n\tthis.build = function (property_key, properties) \n\t{\n\n\t\temptyCheck(property_key, 'No prop key passed'); \n\t\tproperties = properties || null;\n\t\tthis.parse_properties(property_key, properties, this.baseObject, this.eval_ctx_dict);\n\t\treturn this.noMoreBuild ? this.baseObject : this;\n\t}\n\n\tthis.buildIn = function(depth_path, properties)\n\t{\n\t\temptyCheck(depth_path, 'No object path passed'); \n\t\tvar paths     = depth_path.split('.');\n\t\tvar buildBase = this.baseObject;\n\n\t\tfor( x = 0; x < paths.length; x++) \n\t\t{\n\t\t\tif(buildBase[paths[x]])\n\t\t\t{\n\n\t\t\t\t//Only build when path is an object. x:'string' should fail\n\t\t\t\tif( typeof buildBase[paths[x]] == 'object' )\n\t\t\t\t{\n\t\t\t\t\tbuildBase = buildBase[paths[x]];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthrow new Error('Path not an object');\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbuildBase = buildBase[paths[x]] = {};\n\t\t\t}\n\t\t} \n\t\t//If properties are passed, populate new object.\n\t\tif (properties)\n\t\t{\n\t\t\tthis.parse_properties(properties, null, buildBase, this.eval_ctx_dict);\n\t\t}\n\t\treturn this.noMoreBuild ? this.baseObject : this;\n\t}\n\n\tthis.end = function () \n\t{\n\t\tthis.noMoreBuild = true;\n\t\treturn this.baseObject;\n\t}\n\n}\nmodule.exports = MoscBase; "]},"metadata":{},"sourceType":"script"}