{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst encrypt = require('./encryp');\n\nvar spec = morx.spec().build('account_bank', 'required:true, eg:00000').build('account_number', 'required:true, eg:0000000000').build('currency', 'required:true, eg:GBP').build('amount', 'required:true, eg:10').build('phone_number', 'required:false, eg:08030930236').build('email', 'required:true, eg:debowalefaulkner@gmail.com').build('fullname', 'required:false, eg:lawal garba').build('client_ip', 'required:false, eg:127.0.0.1').build('tx_ref', 'required:false, eg:FLW_y-443342').build('subaccounts', 'required:false').build('meta', 'required:false').build('device_fingerprint', 'required:false').build('bvn', 'required:false').build('passcode', 'required:false').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {\n      throw_error: true\n    });\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    return _rave.request('v3/charges?type=debit_ng_account', params);\n  }).then(response => {\n    d.resolve(response.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/charge/rave.ng-banks.js"],"names":["morx","require","q","encrypt","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","throw_error","params","then","request","response","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAGA,IAAIG,IAAI,GAAGJ,IAAI,CAACI,IAAL,GACTC,KADS,CACH,cADG,EACa,yBADb,EAETA,KAFS,CAEH,gBAFG,EAEe,8BAFf,EAGTA,KAHS,CAGH,UAHG,EAGS,uBAHT,EAITA,KAJS,CAIH,QAJG,EAIO,sBAJP,EAKTA,KALS,CAKH,cALG,EAKa,gCALb,EAMTA,KANS,CAMH,OANG,EAMM,8CANN,EAOTA,KAPS,CAOH,UAPG,EAOS,gCAPT,EAQTA,KARS,CAQH,WARG,EAQU,8BARV,EASTA,KATS,CASH,QATG,EASO,iCATP,EAUTA,KAVS,CAUH,aAVG,EAUY,gBAVZ,EAWTA,KAXS,CAWH,MAXG,EAWK,gBAXL,EAYTA,KAZS,CAYH,oBAZG,EAYmB,gBAZnB,EAaTA,KAbS,CAaH,KAbG,EAaI,gBAbJ,EAcTA,KAdS,CAcH,UAdG,EAcS,gBAdT,EAeTC,GAfS,EAAX;;AAiBA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAE7B,MAAIC,CAAC,GAAGR,CAAC,CAACS,KAAF,EAAR;AAEAT,EAAAA,CAAC,CAACU,KAAF,CAAQ,MAAM;AAEZ,QAAIC,SAAS,GAAGb,IAAI,CAACc,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,EAA8C;AAACC,MAAAA,WAAW,EAAC;AAAb,KAA9C,CAAhB;AACA,QAAIC,MAAM,GAAGJ,SAAS,CAACI,MAAvB;AAEA,WAAQA,MAAR;AAEA,GAPF,EAQEC,IARF,CAQOD,MAAM,IAAI;AAGf,WAAOR,KAAK,CAACU,OAAN,CAAc,kCAAd,EAAkDF,MAAlD,CAAP;AACA,GAZF,EAaEC,IAbF,CAaOE,QAAQ,IAAI;AAEjBV,IAAAA,CAAC,CAACW,OAAF,CAAUD,QAAQ,CAACE,IAAnB;AAEA,GAjBF,EAkBEC,KAlBF,CAkBQC,GAAG,IAAI;AAEbd,IAAAA,CAAC,CAACe,MAAF,CAASD,GAAT;AAEA,GAtBF;AAwBA,SAAOd,CAAC,CAACgB,OAAT;AAIA;;AACDnB,OAAO,CAACoB,OAAR,GAAkBvB,IAAlB;AACAwB,MAAM,CAACC,OAAP,GAAiBtB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\nconst encrypt = require('./encryp')\n\n\nvar spec = morx.spec()\n\t.build('account_bank', 'required:true, eg:00000')\n\t.build('account_number', 'required:true, eg:0000000000')\n\t.build('currency', 'required:true, eg:GBP')\n\t.build('amount', 'required:true, eg:10')\n\t.build('phone_number', 'required:false, eg:08030930236')\n\t.build('email', 'required:true, eg:debowalefaulkner@gmail.com')\n\t.build('fullname', 'required:false, eg:lawal garba')\n\t.build('client_ip', 'required:false, eg:127.0.0.1')\n\t.build('tx_ref', 'required:false, eg:FLW_y-443342')\n\t.build('subaccounts', 'required:false')\n\t.build('meta', 'required:false')\n\t.build('device_fingerprint', 'required:false')\n\t.build('bvn', 'required:false')\n\t.build('passcode', 'required:false')\n\t.end();\n\nfunction service(data, _rave) {\n\n\tvar d = q.defer();\n\n\tq.fcall(() => {\n\n\t\t\tvar validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {throw_error:true});\n\t\t\tvar params = validated.params;\n\n\t\t\treturn (params);\n\n\t\t})\n\t\t.then(params => {\n\n\t\t\t\n\t\t\treturn _rave.request('v3/charges?type=debit_ng_account', params)\n\t\t})\n\t\t.then(response => {\n\n\t\t\td.resolve(response.body);\n\n\t\t})\n\t\t.catch(err => {\n\n\t\t\td.reject(err);\n\n\t\t})\n\n\treturn d.promise;\n\n\n\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}