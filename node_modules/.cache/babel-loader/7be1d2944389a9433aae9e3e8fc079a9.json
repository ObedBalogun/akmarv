{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst encrypt = require('./encryp');\n\nvar spec = morx.spec().build('type', 'required:false, eg:card').build('otp', 'required:true, eg:12345').build('flw_ref', 'required:true, eg:RVFC6477605CE934').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {\n      throw_error: true\n    });\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    var uri = `v3/validate-charge`;\n    return _rave.request(uri, params);\n  }).then(response => {\n    d.resolve(response.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/charge/rave.validate.js"],"names":["morx","require","q","encrypt","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","throw_error","params","then","uri","request","response","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAIA,IAAIG,IAAI,GAAGJ,IAAI,CAACI,IAAL,GACTC,KADS,CACH,MADG,EACK,yBADL,EAETA,KAFS,CAEH,KAFG,EAEI,yBAFJ,EAGTA,KAHS,CAGH,SAHG,EAGQ,oCAHR,EAITC,GAJS,EAAX;;AAMA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAE7B,MAAIC,CAAC,GAAGR,CAAC,CAACS,KAAF,EAAR;AAEAT,EAAAA,CAAC,CAACU,KAAF,CAAQ,MAAM;AAEZ,QAAIC,SAAS,GAAGb,IAAI,CAACc,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,EAA8C;AAACC,MAAAA,WAAW,EAAC;AAAb,KAA9C,CAAhB;AACA,QAAIC,MAAM,GAAGJ,SAAS,CAACI,MAAvB;AAEA,WAAQA,MAAR;AAEA,GAPF,EAQEC,IARF,CAQOD,MAAM,IAAI;AAIf,QAAIE,GAAG,GAAI,oBAAX;AAEA,WAAOV,KAAK,CAACW,OAAN,CAAcD,GAAd,EAAmBF,MAAnB,CAAP;AACA,GAfF,EAgBEC,IAhBF,CAgBOG,QAAQ,IAAI;AAEjBX,IAAAA,CAAC,CAACY,OAAF,CAAUD,QAAQ,CAACE,IAAnB;AAEA,GApBF,EAqBEC,KArBF,CAqBQC,GAAG,IAAI;AAEbf,IAAAA,CAAC,CAACgB,MAAF,CAASD,GAAT;AAEA,GAzBF;AA2BA,SAAOf,CAAC,CAACiB,OAAT;AAIA;;AACDpB,OAAO,CAACqB,OAAR,GAAkBxB,IAAlB;AACAyB,MAAM,CAACC,OAAP,GAAiBvB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\nconst encrypt = require('./encryp')\n\n\n\nvar spec = morx.spec()\n\t.build('type', 'required:false, eg:card')\n\t.build('otp', 'required:true, eg:12345')\n\t.build('flw_ref', 'required:true, eg:RVFC6477605CE934')\n\t.end();\n\nfunction service(data, _rave) {\n\n\tvar d = q.defer();\n\n\tq.fcall(() => {\n\n\t\t\tvar validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {throw_error:true});\n\t\t\tvar params = validated.params;\n\n\t\t\treturn (params);\n\n\t\t})\n\t\t.then(params => {\n\n\n\n\t\t\tvar uri = `v3/validate-charge`\n\n\t\t\treturn _rave.request(uri, params)\n\t\t})\n\t\t.then(response => {\n\n\t\t\td.resolve(response.body);\n\n\t\t})\n\t\t.catch(err => {\n\n\t\t\td.reject(err);\n\n\t\t})\n\n\treturn d.promise;\n\n\n\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}