{"ast":null,"code":"// prototype class for hash functions\nfunction Hash(blockSize, finalSize) {\n  this._block = new Buffer(blockSize);\n  this._finalSize = finalSize;\n  this._blockSize = blockSize;\n  this._len = 0;\n  this._s = 0;\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8';\n    data = new Buffer(data, enc);\n  }\n\n  var l = this._len += data.length;\n  var s = this._s || 0;\n  var f = 0;\n  var buffer = this._block;\n\n  while (s < l) {\n    var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);\n    var ch = t - f;\n\n    for (var i = 0; i < ch; i++) {\n      buffer[s % this._blockSize + i] = data[i + f];\n    }\n\n    s += ch;\n    f += ch;\n\n    if (s % this._blockSize === 0) {\n      this._update(buffer);\n    }\n  }\n\n  this._s = s;\n  return this;\n};\n\nHash.prototype.digest = function (enc) {\n  // Suppose the length of the message M, in bits, is l\n  var l = this._len * 8; // Append the bit 1 to the end of the message\n\n  this._block[this._len % this._blockSize] = 0x80; // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n\n  this._block.fill(0, this._len % this._blockSize + 1);\n\n  if (l % (this._blockSize * 8) >= this._finalSize * 8) {\n    this._update(this._block);\n\n    this._block.fill(0);\n  } // to this append the block which is equal to the number l written in binary\n  // TODO: handle case where l is > Math.pow(2, 29)\n\n\n  this._block.writeInt32BE(l, this._blockSize - 4);\n\n  var hash = this._update(this._block) || this._hash();\n\n  return enc ? hash.toString(enc) : hash;\n};\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass');\n};\n\nmodule.exports = Hash;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/node_modules/sha.js/hash.js"],"names":["Hash","blockSize","finalSize","_block","Buffer","_finalSize","_blockSize","_len","_s","prototype","update","data","enc","l","length","s","f","buffer","t","Math","min","ch","i","_update","digest","fill","writeInt32BE","hash","_hash","toString","Error","module","exports"],"mappings":"AAAA;AACA,SAASA,IAAT,CAAeC,SAAf,EAA0BC,SAA1B,EAAqC;AACnC,OAAKC,MAAL,GAAc,IAAIC,MAAJ,CAAWH,SAAX,CAAd;AACA,OAAKI,UAAL,GAAkBH,SAAlB;AACA,OAAKI,UAAL,GAAkBL,SAAlB;AACA,OAAKM,IAAL,GAAY,CAAZ;AACA,OAAKC,EAAL,GAAU,CAAV;AACD;;AAEDR,IAAI,CAACS,SAAL,CAAeC,MAAf,GAAwB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC3C,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BC,IAAAA,GAAG,GAAGA,GAAG,IAAI,MAAb;AACAD,IAAAA,IAAI,GAAG,IAAIP,MAAJ,CAAWO,IAAX,EAAiBC,GAAjB,CAAP;AACD;;AAED,MAAIC,CAAC,GAAG,KAAKN,IAAL,IAAaI,IAAI,CAACG,MAA1B;AACA,MAAIC,CAAC,GAAG,KAAKP,EAAL,IAAW,CAAnB;AACA,MAAIQ,CAAC,GAAG,CAAR;AACA,MAAIC,MAAM,GAAG,KAAKd,MAAlB;;AAEA,SAAOY,CAAC,GAAGF,CAAX,EAAc;AACZ,QAAIK,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAST,IAAI,CAACG,MAAd,EAAsBE,CAAC,GAAG,KAAKV,UAAT,GAAuBS,CAAC,GAAG,KAAKT,UAAtD,CAAR;AACA,QAAIe,EAAE,GAAIH,CAAC,GAAGF,CAAd;;AAEA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,EAApB,EAAwBC,CAAC,EAAzB,EAA6B;AAC3BL,MAAAA,MAAM,CAAEF,CAAC,GAAG,KAAKT,UAAV,GAAwBgB,CAAzB,CAAN,GAAoCX,IAAI,CAACW,CAAC,GAAGN,CAAL,CAAxC;AACD;;AAEDD,IAAAA,CAAC,IAAIM,EAAL;AACAL,IAAAA,CAAC,IAAIK,EAAL;;AAEA,QAAKN,CAAC,GAAG,KAAKT,UAAV,KAA0B,CAA9B,EAAiC;AAC/B,WAAKiB,OAAL,CAAaN,MAAb;AACD;AACF;;AACD,OAAKT,EAAL,GAAUO,CAAV;AAEA,SAAO,IAAP;AACD,CA7BD;;AA+BAf,IAAI,CAACS,SAAL,CAAee,MAAf,GAAwB,UAAUZ,GAAV,EAAe;AACrC;AACA,MAAIC,CAAC,GAAG,KAAKN,IAAL,GAAY,CAApB,CAFqC,CAIrC;;AACA,OAAKJ,MAAL,CAAY,KAAKI,IAAL,GAAY,KAAKD,UAA7B,IAA2C,IAA3C,CALqC,CAOrC;;AACA,OAAKH,MAAL,CAAYsB,IAAZ,CAAiB,CAAjB,EAAoB,KAAKlB,IAAL,GAAY,KAAKD,UAAjB,GAA8B,CAAlD;;AAEA,MAAIO,CAAC,IAAI,KAAKP,UAAL,GAAkB,CAAtB,CAAD,IAA6B,KAAKD,UAAL,GAAkB,CAAnD,EAAsD;AACpD,SAAKkB,OAAL,CAAa,KAAKpB,MAAlB;;AACA,SAAKA,MAAL,CAAYsB,IAAZ,CAAiB,CAAjB;AACD,GAboC,CAerC;AACA;;;AACA,OAAKtB,MAAL,CAAYuB,YAAZ,CAAyBb,CAAzB,EAA4B,KAAKP,UAAL,GAAkB,CAA9C;;AAEA,MAAIqB,IAAI,GAAG,KAAKJ,OAAL,CAAa,KAAKpB,MAAlB,KAA6B,KAAKyB,KAAL,EAAxC;;AAEA,SAAOhB,GAAG,GAAGe,IAAI,CAACE,QAAL,CAAcjB,GAAd,CAAH,GAAwBe,IAAlC;AACD,CAtBD;;AAwBA3B,IAAI,CAACS,SAAL,CAAec,OAAf,GAAyB,YAAY;AACnC,QAAM,IAAIO,KAAJ,CAAU,yCAAV,CAAN;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiBhC,IAAjB","sourcesContent":["// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = new Buffer(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n  this._s = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = new Buffer(data, enc)\n  }\n\n  var l = this._len += data.length\n  var s = this._s || 0\n  var f = 0\n  var buffer = this._block\n\n  while (s < l) {\n    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))\n    var ch = (t - f)\n\n    for (var i = 0; i < ch; i++) {\n      buffer[(s % this._blockSize) + i] = data[i + f]\n    }\n\n    s += ch\n    f += ch\n\n    if ((s % this._blockSize) === 0) {\n      this._update(buffer)\n    }\n  }\n  this._s = s\n\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  // Suppose the length of the message M, in bits, is l\n  var l = this._len * 8\n\n  // Append the bit 1 to the end of the message\n  this._block[this._len % this._blockSize] = 0x80\n\n  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n  this._block.fill(0, this._len % this._blockSize + 1)\n\n  if (l % (this._blockSize * 8) >= this._finalSize * 8) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  // to this append the block which is equal to the number l written in binary\n  // TODO: handle case where l is > Math.pow(2, 29)\n  this._block.writeInt32BE(l, this._blockSize - 4)\n\n  var hash = this._update(this._block) || this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n"]},"metadata":{},"sourceType":"script"}