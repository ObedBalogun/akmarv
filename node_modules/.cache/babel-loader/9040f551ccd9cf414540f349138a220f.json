{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst spec = morx.spec().build('country', 'required:true, eg:NG').build('amount', 'required:true, eg:500').build('customer', 'required:true, eg:9300049404444').build('recurrence', 'required:true, eg:weekly').build('type', 'required:false,eg:DSTV').build('reference', 'required:true, eg:9300049404444').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {\n      throw_error: true\n    });\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    //   console.log(params)\n    return _rave.request('v3/bills', params);\n  }).then(resp => {\n    d.resolve(resp.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/bills/rave.create-bill.payment.js"],"names":["morx","require","q","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","throw_error","params","then","request","resp","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AAEA,MAAME,IAAI,GAAGH,IAAI,CAACG,IAAL,GAEXC,KAFW,CAEL,SAFK,EAEM,sBAFN,EAGXA,KAHW,CAGL,QAHK,EAGK,uBAHL,EAIXA,KAJW,CAIL,UAJK,EAIO,iCAJP,EAKXA,KALW,CAKL,YALK,EAKS,0BALT,EAMXA,KANW,CAML,MANK,EAMG,wBANH,EAOXA,KAPW,CAOL,WAPK,EAOQ,iCAPR,EAQXC,GARW,EAAb;;AAYA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAE7B,MAAIC,CAAC,GAAGP,CAAC,CAACQ,KAAF,EAAR;AACAR,EAAAA,CAAC,CAACS,KAAF,CAAQ,MAAM;AAEZ,QAAIC,SAAS,GAAGZ,IAAI,CAACa,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,EAA+C;AAACC,MAAAA,WAAW,EAAC;AAAb,KAA/C,CAAhB;AACA,QAAIC,MAAM,GAAGJ,SAAS,CAACI,MAAvB;AAEA,WAAQA,MAAR;AAEA,GAPF,EAQEC,IARF,CAQOD,MAAM,IAAI;AACf;AACA,WAAOR,KAAK,CAACU,OAAN,CAAc,UAAd,EAA0BF,MAA1B,CAAP;AACA,GAXF,EAYEC,IAZF,CAYOE,IAAI,IAAI;AAEbV,IAAAA,CAAC,CAACW,OAAF,CAAUD,IAAI,CAACE,IAAf;AAEA,GAhBF,EAiBEC,KAjBF,CAiBQC,GAAG,IAAI;AAEbd,IAAAA,CAAC,CAACe,MAAF,CAASD,GAAT;AAEA,GArBF;AAuBA,SAAOd,CAAC,CAACgB,OAAT;AAEA;;AACDnB,OAAO,CAACoB,OAAR,GAAkBvB,IAAlB;AACAwB,MAAM,CAACC,OAAP,GAAiBtB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\n\nconst spec = morx.spec()\n\n\t.build('country', 'required:true, eg:NG')\n\t.build('amount', 'required:true, eg:500')\n\t.build('customer', 'required:true, eg:9300049404444')\n\t.build('recurrence', 'required:true, eg:weekly')\n\t.build('type', 'required:false,eg:DSTV')\n\t.build('reference', 'required:true, eg:9300049404444')\n\t.end();\n\n\n\nfunction service(data, _rave) {\n\n\tvar d = q.defer();\n\tq.fcall(() => {\n\n\t\t\tvar validated = morx.validate(data, spec, _rave.MORX_DEFAULT,  {throw_error:true});\n\t\t\tvar params = validated.params;\n\n\t\t\treturn (params);\n\n\t\t})\n\t\t.then(params => {\n\t\t\t//   console.log(params)\n\t\t\treturn _rave.request('v3/bills', params)\n\t\t})\n\t\t.then(resp => {\n\n\t\t\td.resolve(resp.body);\n\n\t\t})\n\t\t.catch(err => {\n\n\t\t\td.reject(err);\n\n\t\t});\n\n\treturn d.promise;\n\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}