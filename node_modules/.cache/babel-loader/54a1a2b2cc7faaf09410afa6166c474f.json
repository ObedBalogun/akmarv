{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst spec = morx.spec().build('token', 'required:true, eg:flw-t1nf-f9b3bf384cd30d6fca42b6df9d27bd2f-m03k').build('email', 'required:false, eg:debowalefaulkner@gmail.com').build('phone_number', 'required:false, eg:0813XXXXXXX').build('last_name', 'required:false, eg:garuba').build('first_name', 'required:false, eg:garuba').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    params.method = \"PUT\";\n    return _rave.request(`v3/tokens/${params.token}`, params);\n  }).then(resp => {\n    d.resolve(resp.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/tokenized-charges/rave.update.tokens.js"],"names":["morx","require","q","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","params","then","method","request","token","resp","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AAEA,MAAME,IAAI,GAAGH,IAAI,CAACG,IAAL,GACXC,KADW,CACL,OADK,EACI,kEADJ,EAEXA,KAFW,CAEL,OAFK,EAEI,+CAFJ,EAGXA,KAHW,CAGL,cAHK,EAGW,gCAHX,EAIXA,KAJW,CAIL,WAJK,EAIQ,2BAJR,EAKXA,KALW,CAKL,YALK,EAKS,2BALT,EAOXC,GAPW,EAAb;;AAUA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAE7B,MAAIC,CAAC,GAAGP,CAAC,CAACQ,KAAF,EAAR;AACAR,EAAAA,CAAC,CAACS,KAAF,CAAQ,MAAM;AAEZ,QAAIC,SAAS,GAAGZ,IAAI,CAACa,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,CAAhB;AACA,QAAIC,MAAM,GAAGH,SAAS,CAACG,MAAvB;AAEA,WAAQA,MAAR;AAEA,GAPF,EAQEC,IARF,CAQOD,MAAM,IAAI;AACfA,IAAAA,MAAM,CAACE,MAAP,GAAgB,KAAhB;AACA,WAAOT,KAAK,CAACU,OAAN,CAAe,aAAYH,MAAM,CAACI,KAAM,EAAxC,EAA2CJ,MAA3C,CAAP;AACA,GAXF,EAYEC,IAZF,CAYOI,IAAI,IAAI;AAEbX,IAAAA,CAAC,CAACY,OAAF,CAAUD,IAAI,CAACE,IAAf;AAEA,GAhBF,EAiBEC,KAjBF,CAiBQC,GAAG,IAAI;AAEbf,IAAAA,CAAC,CAACgB,MAAF,CAASD,GAAT;AAEA,GArBF;AAuBA,SAAOf,CAAC,CAACiB,OAAT;AAEA;;AACDpB,OAAO,CAACqB,OAAR,GAAkBxB,IAAlB;AACAyB,MAAM,CAACC,OAAP,GAAiBvB,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\n\nconst spec = morx.spec()\n\t.build('token', 'required:true, eg:flw-t1nf-f9b3bf384cd30d6fca42b6df9d27bd2f-m03k')\n\t.build('email', 'required:false, eg:debowalefaulkner@gmail.com')\n\t.build('phone_number', 'required:false, eg:0813XXXXXXX')\n\t.build('last_name', 'required:false, eg:garuba')\n\t.build('first_name', 'required:false, eg:garuba')\n\n\t.end();\n\n\nfunction service(data, _rave) {\n\n\tvar d = q.defer();\n\tq.fcall(() => {\n\n\t\t\tvar validated = morx.validate(data, spec, _rave.MORX_DEFAULT);\n\t\t\tvar params = validated.params;\n\n\t\t\treturn (params);\n\n\t\t})\n\t\t.then(params => {\n\t\t\tparams.method = \"PUT\"\n\t\t\treturn _rave.request(`v3/tokens/${params.token}`, params)\n\t\t})\n\t\t.then(resp => {\n\n\t\t\td.resolve(resp.body);\n\n\t\t})\n\t\t.catch(err => {\n\n\t\t\td.reject(err);\n\n\t\t});\n\n\treturn d.promise;\n\n}\nservice.morxspc = spec;\nmodule.exports = service;"]},"metadata":{},"sourceType":"script"}