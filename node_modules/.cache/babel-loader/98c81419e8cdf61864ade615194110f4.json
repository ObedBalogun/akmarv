{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n\nconst fs = require('fs');\n\nconst isWsl = require('is-wsl');\n\nconst isDocker = require('is-docker');\n\nconst pAccess = promisify(fs.access);\nconst pReadFile = promisify(fs.readFile); // Path to included `xdg-open`.\n\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\n\nconst getWslDrivesMountPoint = (() => {\n  // Default value for \"root\" param\n  // according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n  const defaultMountPoint = '/mnt/';\n  let mountPoint;\n  return async function () {\n    if (mountPoint) {\n      // Return memoized mount point value\n      return mountPoint;\n    }\n\n    const configFilePath = '/etc/wsl.conf';\n    let isConfigFileExists = false;\n\n    try {\n      await pAccess(configFilePath, fs.constants.F_OK);\n      isConfigFileExists = true;\n    } catch (_) {}\n\n    if (!isConfigFileExists) {\n      return defaultMountPoint;\n    }\n\n    const configContent = await pReadFile(configFilePath, {\n      encoding: 'utf8'\n    });\n    const configMountPoint = /root\\s*=\\s*(.*)/g.exec(configContent);\n\n    if (!configMountPoint) {\n      return defaultMountPoint;\n    }\n\n    mountPoint = configMountPoint[1].trim();\n    mountPoint = mountPoint.endsWith('/') ? mountPoint : mountPoint + '/';\n    return mountPoint;\n  };\n})();\n\nmodule.exports = async (target, options) => {\n  if (typeof target !== 'string') {\n    throw new TypeError('Expected a `target`');\n  }\n\n  options = {\n    wait: false,\n    background: false,\n    allowNonzeroExitCode: false,\n    ...options\n  };\n  let command;\n  let {\n    app\n  } = options;\n  let appArguments = [];\n  const cliArguments = [];\n  const childProcessOptions = {};\n\n  if (Array.isArray(app)) {\n    appArguments = app.slice(1);\n    app = app[0];\n  }\n\n  if (process.platform === 'darwin') {\n    command = 'open';\n\n    if (options.wait) {\n      cliArguments.push('--wait-apps');\n    }\n\n    if (options.background) {\n      cliArguments.push('--background');\n    }\n\n    if (app) {\n      cliArguments.push('-a', app);\n    }\n  } else if (process.platform === 'win32' || isWsl && !isDocker()) {\n    const mountPoint = await getWslDrivesMountPoint();\n    command = isWsl ? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n    cliArguments.push('-NoProfile', '-NonInteractive', 'â€“ExecutionPolicy', 'Bypass', '-EncodedCommand');\n\n    if (!isWsl) {\n      childProcessOptions.windowsVerbatimArguments = true;\n    }\n\n    const encodedArguments = ['Start'];\n\n    if (options.wait) {\n      encodedArguments.push('-Wait');\n    }\n\n    if (app) {\n      // Double quote with double quotes to ensure the inner quotes are passed through.\n      // Inner quotes are delimited for PowerShell interpretation with backticks.\n      encodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n      appArguments.unshift(target);\n    } else {\n      encodedArguments.push(`\"${target}\"`);\n    }\n\n    if (appArguments.length > 0) {\n      appArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n      encodedArguments.push(appArguments.join(','));\n    } // Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\n\n    target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n  } else {\n    if (app) {\n      command = app;\n    } else {\n      // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n      const isBundled = !__dirname || __dirname === '/'; // Check if local `xdg-open` exists and is executable.\n\n      let exeLocalXdgOpen = false;\n\n      try {\n        await pAccess(localXdgOpenPath, fs.constants.X_OK);\n        exeLocalXdgOpen = true;\n      } catch (_) {}\n\n      const useSystemXdgOpen = process.versions.electron || process.platform === 'android' || isBundled || !exeLocalXdgOpen;\n      command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n    }\n\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n\n    if (!options.wait) {\n      // `xdg-open` will block the process unless stdio is ignored\n      // and it's detached from the parent even if it's unref'd.\n      childProcessOptions.stdio = 'ignore';\n      childProcessOptions.detached = true;\n    }\n  }\n\n  cliArguments.push(target);\n\n  if (process.platform === 'darwin' && appArguments.length > 0) {\n    cliArguments.push('--args', ...appArguments);\n  }\n\n  const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n  if (options.wait) {\n    return new Promise((resolve, reject) => {\n      subprocess.once('error', reject);\n      subprocess.once('close', exitCode => {\n        if (options.allowNonzeroExitCode && exitCode > 0) {\n          reject(new Error(`Exited with code ${exitCode}`));\n          return;\n        }\n\n        resolve(subprocess);\n      });\n    });\n  }\n\n  subprocess.unref();\n  return subprocess;\n};","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/open/index.js"],"names":["promisify","require","path","childProcess","fs","isWsl","isDocker","pAccess","access","pReadFile","readFile","localXdgOpenPath","join","__dirname","getWslDrivesMountPoint","defaultMountPoint","mountPoint","configFilePath","isConfigFileExists","constants","F_OK","_","configContent","encoding","configMountPoint","exec","trim","endsWith","module","exports","target","options","TypeError","wait","background","allowNonzeroExitCode","command","app","appArguments","cliArguments","childProcessOptions","Array","isArray","slice","process","platform","push","env","SYSTEMROOT","windowsVerbatimArguments","encodedArguments","unshift","length","map","arg","Buffer","from","toString","isBundled","exeLocalXdgOpen","X_OK","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\n\nconst pAccess = promisify(fs.access);\nconst pReadFile = promisify(fs.readFile);\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait pAccess(configFilePath, fs.constants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch (_) {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await pReadFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /root\\s*=\\s*(.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint[1].trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : mountPoint + '/';\n\n\t\treturn mountPoint;\n\t};\n})();\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet {app} = options;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(app)) {\n\t\tappArguments = app.slice(1);\n\t\tapp = app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (process.platform === 'win32' || (isWsl && !isDocker())) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'â€“ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tappArguments.unshift(target);\n\t\t} else {\n\t\t\tencodedArguments.push(`\"${target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\ttarget = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (_) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n"]},"metadata":{},"sourceType":"script"}