{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDate;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _isISO = require('./isISO8601');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getTimezoneOffset(str) {\n  var iso8601Parts = str.match(_isISO.iso8601);\n  var timezone = void 0,\n      sign = void 0,\n      hours = void 0,\n      minutes = void 0;\n\n  if (!iso8601Parts) {\n    str = str.toLowerCase();\n    timezone = str.match(/(?:\\s|gmt\\s*)(-|\\+)(\\d{1,4})(\\s|$)/);\n\n    if (!timezone) {\n      return str.indexOf('gmt') !== -1 ? 0 : null;\n    }\n\n    sign = timezone[1];\n    var offset = timezone[2];\n\n    if (offset.length === 3) {\n      offset = '0' + offset;\n    }\n\n    if (offset.length <= 2) {\n      hours = 0;\n      minutes = parseInt(offset, 10);\n    } else {\n      hours = parseInt(offset.slice(0, 2), 10);\n      minutes = parseInt(offset.slice(2, 4), 10);\n    }\n  } else {\n    timezone = iso8601Parts[21];\n\n    if (!timezone) {\n      // if no hour/minute was provided, the date is GMT\n      return !iso8601Parts[12] ? 0 : null;\n    }\n\n    if (timezone === 'z' || timezone === 'Z') {\n      return 0;\n    }\n\n    sign = iso8601Parts[22];\n\n    if (timezone.indexOf(':') !== -1) {\n      hours = parseInt(iso8601Parts[23], 10);\n      minutes = parseInt(iso8601Parts[24], 10);\n    } else {\n      hours = 0;\n      minutes = parseInt(iso8601Parts[23], 10);\n    }\n  }\n\n  return (hours * 60 + minutes) * (sign === '-' ? 1 : -1);\n}\n\nfunction isDate(str) {\n  (0, _assertString2.default)(str);\n  var normalizedDate = new Date(Date.parse(str));\n\n  if (isNaN(normalizedDate)) {\n    return false;\n  } // normalizedDate is in the user's timezone. Apply the input\n  // timezone offset to the date so that the year and day match\n  // the input\n\n\n  var timezoneOffset = getTimezoneOffset(str);\n\n  if (timezoneOffset !== null) {\n    var timezoneDifference = normalizedDate.getTimezoneOffset() - timezoneOffset;\n    normalizedDate = new Date(normalizedDate.getTime() + 60000 * timezoneDifference);\n  }\n\n  var day = String(normalizedDate.getDate());\n  var dayOrYear = void 0,\n      dayOrYearMatches = void 0,\n      year = void 0; // check for valid double digits that could be late days\n  // check for all matches since a string like '12/23' is a valid date\n  // ignore everything with nearby colons\n\n  dayOrYearMatches = str.match(/(^|[^:\\d])[23]\\d([^T:\\d]|$)/g);\n\n  if (!dayOrYearMatches) {\n    return true;\n  }\n\n  dayOrYear = dayOrYearMatches.map(function (digitString) {\n    return digitString.match(/\\d+/g)[0];\n  }).join('/');\n  year = String(normalizedDate.getFullYear()).slice(-2);\n\n  if (dayOrYear === day || dayOrYear === year) {\n    return true;\n  } else if (dayOrYear === '' + day / year || dayOrYear === '' + year / day) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/validator/lib/isDate.js"],"names":["Object","defineProperty","exports","value","default","isDate","_assertString","require","_assertString2","_interopRequireDefault","_isISO","obj","__esModule","getTimezoneOffset","str","iso8601Parts","match","iso8601","timezone","sign","hours","minutes","toLowerCase","indexOf","offset","length","parseInt","slice","normalizedDate","Date","parse","isNaN","timezoneOffset","timezoneDifference","getTime","day","String","getDate","dayOrYear","dayOrYearMatches","year","map","digitString","join","getFullYear","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDate;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _isISO = require('./isISO8601');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getTimezoneOffset(str) {\n  var iso8601Parts = str.match(_isISO.iso8601);\n  var timezone = void 0,\n      sign = void 0,\n      hours = void 0,\n      minutes = void 0;\n  if (!iso8601Parts) {\n    str = str.toLowerCase();\n    timezone = str.match(/(?:\\s|gmt\\s*)(-|\\+)(\\d{1,4})(\\s|$)/);\n    if (!timezone) {\n      return str.indexOf('gmt') !== -1 ? 0 : null;\n    }\n    sign = timezone[1];\n    var offset = timezone[2];\n    if (offset.length === 3) {\n      offset = '0' + offset;\n    }\n    if (offset.length <= 2) {\n      hours = 0;\n      minutes = parseInt(offset, 10);\n    } else {\n      hours = parseInt(offset.slice(0, 2), 10);\n      minutes = parseInt(offset.slice(2, 4), 10);\n    }\n  } else {\n    timezone = iso8601Parts[21];\n    if (!timezone) {\n      // if no hour/minute was provided, the date is GMT\n      return !iso8601Parts[12] ? 0 : null;\n    }\n    if (timezone === 'z' || timezone === 'Z') {\n      return 0;\n    }\n    sign = iso8601Parts[22];\n    if (timezone.indexOf(':') !== -1) {\n      hours = parseInt(iso8601Parts[23], 10);\n      minutes = parseInt(iso8601Parts[24], 10);\n    } else {\n      hours = 0;\n      minutes = parseInt(iso8601Parts[23], 10);\n    }\n  }\n  return (hours * 60 + minutes) * (sign === '-' ? 1 : -1);\n}\n\nfunction isDate(str) {\n  (0, _assertString2.default)(str);\n  var normalizedDate = new Date(Date.parse(str));\n  if (isNaN(normalizedDate)) {\n    return false;\n  }\n\n  // normalizedDate is in the user's timezone. Apply the input\n  // timezone offset to the date so that the year and day match\n  // the input\n  var timezoneOffset = getTimezoneOffset(str);\n  if (timezoneOffset !== null) {\n    var timezoneDifference = normalizedDate.getTimezoneOffset() - timezoneOffset;\n    normalizedDate = new Date(normalizedDate.getTime() + 60000 * timezoneDifference);\n  }\n\n  var day = String(normalizedDate.getDate());\n  var dayOrYear = void 0,\n      dayOrYearMatches = void 0,\n      year = void 0;\n  // check for valid double digits that could be late days\n  // check for all matches since a string like '12/23' is a valid date\n  // ignore everything with nearby colons\n  dayOrYearMatches = str.match(/(^|[^:\\d])[23]\\d([^T:\\d]|$)/g);\n  if (!dayOrYearMatches) {\n    return true;\n  }\n  dayOrYear = dayOrYearMatches.map(function (digitString) {\n    return digitString.match(/\\d+/g)[0];\n  }).join('/');\n\n  year = String(normalizedDate.getFullYear()).slice(-2);\n  if (dayOrYear === day || dayOrYear === year) {\n    return true;\n  } else if (dayOrYear === '' + day / year || dayOrYear === '' + year / day) {\n    return true;\n  }\n  return false;\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}