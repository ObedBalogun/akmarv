{"ast":null,"code":"var createHash = require('sha.js'); // this is the getKey function that generates an encryption Key  \n// for you by passing your Secret Key as a parameter.\n\n\nfunction getKey(seckey) {\n  var md5 = require('md5');\n\n  var keymd5 = md5(seckey);\n  var keymd5last12 = keymd5.substr(-12);\n  var seckeyadjusted = seckey.replace('FLWSECK-', '');\n  var seckeyadjustedfirst12 = seckeyadjusted.substr(0, 12);\n  return seckeyadjustedfirst12 + keymd5last12;\n} // This is the encryption function that encrypts your payload\n// by passing the stringified format and your encryption Key.\n// function encrypt(key, text)\n// {\n//     console.log(\"Key:   \"+key)\n//     console.log(\"Txt:   \"+text)\n//     var forge    = require('node-forge'); \n//     var cipher   = forge.cipher.createCipher('3DES-ECB', forge.util.createBuffer(key));\n//     cipher.start({iv:''});\n//     cipher.update(forge.util.createBuffer(text, 'utf-8'));\n//     cipher.finish();\n//     var encrypted = cipher.output;\n//     return ( forge.util.encode64(encrypted.getBytes()) );\n// }\n\n\nfunction encrypt(key, text) {\n  var forge = require(\"node-forge\");\n\n  var cipher = forge.cipher.createCipher(\"3DES-ECB\", forge.util.createBuffer(key));\n  cipher.start({\n    iv: \"\"\n  });\n  cipher.update(forge.util.createBuffer(text, \"utf-8\"));\n  cipher.finish();\n  var encrypted = cipher.output;\n  return forge.util.encode64(encrypted.getBytes());\n}\n\nfunction getIntegrityHash(data, pubkey, seckey) {\n  var objectKeys = Object.keys(data);\n  objectKeys.sort();\n  var hashString = \"\";\n  objectKeys.forEach(function (ok) {\n    if (ok == 'integrity_hash') return; // don't include int hash\n\n    hashString += data[ok];\n  });\n  hashString += seckey;\n  var hash = createHash('sha256').update(hashString, 'utf8').digest('hex');\n  return hash;\n}\n\nmodule.exports = {\n  getEncryptionKey: getKey,\n  encrypt: encrypt,\n  getIntegrityHash: getIntegrityHash\n};","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/lib/security.js"],"names":["createHash","require","getKey","seckey","md5","keymd5","keymd5last12","substr","seckeyadjusted","replace","seckeyadjustedfirst12","encrypt","key","text","forge","cipher","createCipher","util","createBuffer","start","iv","update","finish","encrypted","output","encode64","getBytes","getIntegrityHash","data","pubkey","objectKeys","Object","keys","sort","hashString","forEach","ok","hash","digest","module","exports","getEncryptionKey"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,QAAD,CAAxB,C,CAEA;AACA;;;AACA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,MAAIC,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAjB;;AACA,MAAII,MAAM,GAAGD,GAAG,CAACD,MAAD,CAAhB;AACA,MAAIG,YAAY,GAAGD,MAAM,CAACE,MAAP,CAAc,CAAC,EAAf,CAAnB;AAEA,MAAIC,cAAc,GAAGL,MAAM,CAACM,OAAP,CAAe,UAAf,EAA2B,EAA3B,CAArB;AACA,MAAIC,qBAAqB,GAAGF,cAAc,CAACD,MAAf,CAAsB,CAAtB,EAAyB,EAAzB,CAA5B;AAEA,SAAOG,qBAAqB,GAAGJ,YAA/B;AACH,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASK,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AACxB,MAAIC,KAAK,GAAGb,OAAO,CAAC,YAAD,CAAnB;;AACA,MAAIc,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,YAAb,CACT,UADS,EAETF,KAAK,CAACG,IAAN,CAAWC,YAAX,CAAwBN,GAAxB,CAFS,CAAb;AAIAG,EAAAA,MAAM,CAACI,KAAP,CAAa;AACTC,IAAAA,EAAE,EAAE;AADK,GAAb;AAGAL,EAAAA,MAAM,CAACM,MAAP,CAAcP,KAAK,CAACG,IAAN,CAAWC,YAAX,CAAwBL,IAAxB,EAA8B,OAA9B,CAAd;AACAE,EAAAA,MAAM,CAACO,MAAP;AACA,MAAIC,SAAS,GAAGR,MAAM,CAACS,MAAvB;AACA,SAAOV,KAAK,CAACG,IAAN,CAAWQ,QAAX,CAAoBF,SAAS,CAACG,QAAV,EAApB,CAAP;AACH;;AAED,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,MAAhC,EAAwC1B,MAAxC,EAAgD;AAE5C,MAAI2B,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAjB;AACAE,EAAAA,UAAU,CAACG,IAAX;AACA,MAAIC,UAAU,GAAG,EAAjB;AACAJ,EAAAA,UAAU,CACLK,OADL,CACa,UAAUC,EAAV,EAAc;AAEnB,QAAIA,EAAE,IAAI,gBAAV,EAA4B,OAFT,CAEiB;;AACpCF,IAAAA,UAAU,IAAIN,IAAI,CAACQ,EAAD,CAAlB;AAEH,GANL;AAOAF,EAAAA,UAAU,IAAI/B,MAAd;AACA,MAAIkC,IAAI,GAAGrC,UAAU,CAAC,QAAD,CAAV,CAAqBqB,MAArB,CAA4Ba,UAA5B,EAAwC,MAAxC,EAAgDI,MAAhD,CAAuD,KAAvD,CAAX;AACA,SAAOD,IAAP;AACH;;AAGDE,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,gBAAgB,EAAEvC,MADL;AAEbS,EAAAA,OAAO,EAAEA,OAFI;AAGbgB,EAAAA,gBAAgB,EAAEA;AAHL,CAAjB","sourcesContent":["var createHash = require('sha.js');\n\n// this is the getKey function that generates an encryption Key  \n// for you by passing your Secret Key as a parameter.\nfunction getKey(seckey) {\n    var md5 = require('md5');\n    var keymd5 = md5(seckey);\n    var keymd5last12 = keymd5.substr(-12);\n\n    var seckeyadjusted = seckey.replace('FLWSECK-', '');\n    var seckeyadjustedfirst12 = seckeyadjusted.substr(0, 12);\n\n    return seckeyadjustedfirst12 + keymd5last12;\n}\n\n// This is the encryption function that encrypts your payload\n// by passing the stringified format and your encryption Key.\n// function encrypt(key, text)\n// {\n//     console.log(\"Key:   \"+key)\n\n//     console.log(\"Txt:   \"+text)\n//     var forge    = require('node-forge'); \n//     var cipher   = forge.cipher.createCipher('3DES-ECB', forge.util.createBuffer(key));\n//     cipher.start({iv:''});\n//     cipher.update(forge.util.createBuffer(text, 'utf-8'));\n//     cipher.finish();\n//     var encrypted = cipher.output;\n//     return ( forge.util.encode64(encrypted.getBytes()) );\n// }\n\nfunction encrypt(key, text) {\n    var forge = require(\"node-forge\");\n    var cipher = forge.cipher.createCipher(\n        \"3DES-ECB\",\n        forge.util.createBuffer(key)\n    );\n    cipher.start({\n        iv: \"\"\n    });\n    cipher.update(forge.util.createBuffer(text, \"utf-8\"));\n    cipher.finish();\n    var encrypted = cipher.output;\n    return forge.util.encode64(encrypted.getBytes());\n}\n\nfunction getIntegrityHash(data, pubkey, seckey) {\n\n    var objectKeys = Object.keys(data);\n    objectKeys.sort();\n    var hashString = \"\";\n    objectKeys\n        .forEach(function (ok) {\n\n            if (ok == 'integrity_hash') return; // don't include int hash\n            hashString += data[ok];\n\n        });\n    hashString += seckey;\n    var hash = createHash('sha256').update(hashString, 'utf8').digest('hex');\n    return hash;\n}\n\n\nmodule.exports = {\n    getEncryptionKey: getKey,\n    encrypt: encrypt,\n    getIntegrityHash: getIntegrityHash\n}"]},"metadata":{},"sourceType":"script"}