{"ast":null,"code":"const morx = require('morx');\n\nconst q = require('q');\n\nconst encrypt = require('./encryp');\n\nvar spec = morx.spec().build('enckey', 'required:true, eg:611d0eda25a3c931863d92c4').build('card_number', 'required:true,validators:isNumeric, eg:5590131743294314').build('currency', 'required:true, eg:NGN').build('suggested_auth', 'required:false, eg:VBVSECURECODE').build('country', 'required:false, eg:NG').build('subaccounts', 'required:false').build('cvv', 'required:false, eg:544').build('amount', 'required:true, eg:10').build('phone_number', 'required:false, eg:08030930236').build('billingzip', 'required:false, eg:10105').build('expiry_year', 'required:false, eg:20').build('expiry_month', 'required:false, eg:02').build('email', 'required:true, eg:debowalefaulkner@gmail.com').build('fullname', 'required:false, eg:lawal').build('card_number', 'required:true, eg:5399670123490229').build('client_ip', 'required:false, eg:127.0.0.1').build('authorization', 'required:false').build('preauthorize', 'required:false').build('mode', 'required:false').build('tx_ref', 'required:true, eg:FLW_y-443342').build('redirect_url', 'required:false').build('meta', 'required:false').build('device_fingerprint', 'required:false').end();\n\nfunction service(data, _rave) {\n  var d = q.defer();\n  q.fcall(() => {\n    var validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {\n      throw_error: true\n    });\n    var params = validated.params;\n    return params;\n  }).then(params => {\n    if (params.include_integrity_hash) {\n      delete params.include_integrity_hash;\n\n      var integrity_hash = _rave.getIntegrityHash(params, _rave.getPublicKey(), _rave.getSecretKey());\n\n      params.QUERY_STRING_DATA = JSON.parse(JSON.stringify(params));\n      params.QUERY_STRING_DATA.integrity_hash = integrity_hash;\n    }\n\n    params.str = JSON.stringify(params);\n    var encrypted = encrypt(params.enckey, params.str);\n    var payload = {};\n    payload.public_key = _rave.getPublicKey();\n    payload.client = encrypted;\n    return _rave.request('v3/charges?type=card', payload);\n  }).then(response => {\n    d.resolve(response.body);\n  }).catch(err => {\n    d.reject(err);\n  });\n  return d.promise;\n}\n\nservice.morxspc = spec;\nmodule.exports = service;","map":{"version":3,"sources":["C:/Users/Obed/PycharmProjects/akmarv_project/node_modules/flutterwave-node-v3/services/charge/rave.card.charge.js"],"names":["morx","require","q","encrypt","spec","build","end","service","data","_rave","d","defer","fcall","validated","validate","MORX_DEFAULT","throw_error","params","then","include_integrity_hash","integrity_hash","getIntegrityHash","getPublicKey","getSecretKey","QUERY_STRING_DATA","JSON","parse","stringify","str","encrypted","enckey","payload","public_key","client","request","response","resolve","body","catch","err","reject","promise","morxspc","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,GAAD,CAAjB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAIG,IAAI,GAAGJ,IAAI,CAACI,IAAL,GACTC,KADS,CACH,QADG,EACO,4CADP,EAETA,KAFS,CAEH,aAFG,EAEY,yDAFZ,EAGTA,KAHS,CAGH,UAHG,EAGS,uBAHT,EAITA,KAJS,CAIH,gBAJG,EAIe,kCAJf,EAKTA,KALS,CAKH,SALG,EAKQ,uBALR,EAMTA,KANS,CAMH,aANG,EAMY,gBANZ,EAOTA,KAPS,CAOH,KAPG,EAOI,wBAPJ,EAQTA,KARS,CAQH,QARG,EAQO,sBARP,EASTA,KATS,CASH,cATG,EASa,gCATb,EAUTA,KAVS,CAUH,YAVG,EAUW,0BAVX,EAWTA,KAXS,CAWH,aAXG,EAWY,uBAXZ,EAYTA,KAZS,CAYH,cAZG,EAYa,uBAZb,EAaTA,KAbS,CAaH,OAbG,EAaM,8CAbN,EAcTA,KAdS,CAcH,UAdG,EAcS,0BAdT,EAeTA,KAfS,CAeH,aAfG,EAeY,oCAfZ,EAgBTA,KAhBS,CAgBH,WAhBG,EAgBU,8BAhBV,EAiBTA,KAjBS,CAiBH,eAjBG,EAiBc,gBAjBd,EAkBTA,KAlBS,CAkBH,cAlBG,EAkBa,gBAlBb,EAmBTA,KAnBS,CAmBH,MAnBG,EAmBK,gBAnBL,EAoBTA,KApBS,CAoBH,QApBG,EAoBO,gCApBP,EAqBTA,KArBS,CAqBH,cArBG,EAqBa,gBArBb,EAsBTA,KAtBS,CAsBH,MAtBG,EAsBK,gBAtBL,EAuBTA,KAvBS,CAuBH,oBAvBG,EAuBmB,gBAvBnB,EAwBTC,GAxBS,EAAX;;AA0BA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAE7B,MAAIC,CAAC,GAAGR,CAAC,CAACS,KAAF,EAAR;AAEAT,EAAAA,CAAC,CAACU,KAAF,CAAQ,MAAM;AAEZ,QAAIC,SAAS,GAAGb,IAAI,CAACc,QAAL,CAAcN,IAAd,EAAoBJ,IAApB,EAA0BK,KAAK,CAACM,YAAhC,EAA8C;AAACC,MAAAA,WAAW,EAAC;AAAb,KAA9C,CAAhB;AACA,QAAIC,MAAM,GAAGJ,SAAS,CAACI,MAAvB;AAEA,WAAQA,MAAR;AAEA,GAPF,EAQEC,IARF,CAQOD,MAAM,IAAI;AAKf,QAAIA,MAAM,CAACE,sBAAX,EAAmC;AAElC,aAAOF,MAAM,CAACE,sBAAd;;AAEA,UAAIC,cAAc,GAAGX,KAAK,CAACY,gBAAN,CAAuBJ,MAAvB,EAA+BR,KAAK,CAACa,YAAN,EAA/B,EAAqDb,KAAK,CAACc,YAAN,EAArD,CAArB;;AACAN,MAAAA,MAAM,CAACO,iBAAP,GAA2BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,MAAf,CAAX,CAA3B;AACAA,MAAAA,MAAM,CAACO,iBAAP,CAAyBJ,cAAzB,GAA0CA,cAA1C;AAEA;;AAEDH,IAAAA,MAAM,CAACW,GAAP,GAAaH,IAAI,CAACE,SAAL,CAAeV,MAAf,CAAb;AAGA,QAAIY,SAAS,GAAG1B,OAAO,CAACc,MAAM,CAACa,MAAR,EAAgBb,MAAM,CAACW,GAAvB,CAAvB;AACA,QAAIG,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,UAAR,GAAqBvB,KAAK,CAACa,YAAN,EAArB;AACAS,IAAAA,OAAO,CAACE,MAAR,GAAiBJ,SAAjB;AAEA,WAAOpB,KAAK,CAACyB,OAAN,CAAc,sBAAd,EAAsCH,OAAtC,CAAP;AACA,GAhCF,EAiCEb,IAjCF,CAiCOiB,QAAQ,IAAI;AAEjBzB,IAAAA,CAAC,CAAC0B,OAAF,CAAUD,QAAQ,CAACE,IAAnB;AAEA,GArCF,EAsCEC,KAtCF,CAsCQC,GAAG,IAAI;AAEb7B,IAAAA,CAAC,CAAC8B,MAAF,CAASD,GAAT;AAEA,GA1CF;AA4CA,SAAO7B,CAAC,CAAC+B,OAAT;AAIA;;AACDlC,OAAO,CAACmC,OAAR,GAAkBtC,IAAlB;AACAuC,MAAM,CAACC,OAAP,GAAiBrC,OAAjB","sourcesContent":["const morx = require('morx');\nconst q = require('q');\nconst encrypt = require('./encryp')\n\nvar spec = morx.spec()\n\t.build('enckey', 'required:true, eg:611d0eda25a3c931863d92c4')\n\t.build('card_number', 'required:true,validators:isNumeric, eg:5590131743294314')\n\t.build('currency', 'required:true, eg:NGN')\n\t.build('suggested_auth', 'required:false, eg:VBVSECURECODE')\n\t.build('country', 'required:false, eg:NG')\n\t.build('subaccounts', 'required:false')\n\t.build('cvv', 'required:false, eg:544')\n\t.build('amount', 'required:true, eg:10')\n\t.build('phone_number', 'required:false, eg:08030930236')\n\t.build('billingzip', 'required:false, eg:10105')\n\t.build('expiry_year', 'required:false, eg:20')\n\t.build('expiry_month', 'required:false, eg:02')\n\t.build('email', 'required:true, eg:debowalefaulkner@gmail.com')\n\t.build('fullname', 'required:false, eg:lawal')\n\t.build('card_number', 'required:true, eg:5399670123490229')\n\t.build('client_ip', 'required:false, eg:127.0.0.1')\n\t.build('authorization', 'required:false')\n\t.build('preauthorize', 'required:false')\n\t.build('mode', 'required:false')\n\t.build('tx_ref', 'required:true, eg:FLW_y-443342')\n\t.build('redirect_url', 'required:false')\n\t.build('meta', 'required:false')\n\t.build('device_fingerprint', 'required:false')\n\t.end();\n\nfunction service(data, _rave) {\n\n\tvar d = q.defer();\n\n\tq.fcall(() => {\n\n\t\t\tvar validated = morx.validate(data, spec, _rave.MORX_DEFAULT, {throw_error:true});\n\t\t\tvar params = validated.params;\n\n\t\t\treturn (params);\n\n\t\t})\n\t\t.then(params => {\n\n\n\n\n\t\t\tif (params.include_integrity_hash) {\n\n\t\t\t\tdelete params.include_integrity_hash;\n\t\t\n\t\t\t\tvar integrity_hash = _rave.getIntegrityHash(params, _rave.getPublicKey(), _rave.getSecretKey());\n\t\t\t\tparams.QUERY_STRING_DATA = JSON.parse(JSON.stringify(params));\n\t\t\t\tparams.QUERY_STRING_DATA.integrity_hash = integrity_hash;\n\t\t\n\t\t\t}\n\n\t\t\tparams.str = JSON.stringify(params)\n\n\t\t\t\n\t\t\tvar encrypted = encrypt(params.enckey, params.str);\n\t\t\tvar payload = {};\n\t\t\tpayload.public_key = _rave.getPublicKey();\n\t\t\tpayload.client = encrypted;\n\t\n\t\t\treturn _rave.request('v3/charges?type=card', payload)\n\t\t})\n\t\t.then(response => {\n\n\t\t\td.resolve(response.body);\n\n\t\t})\n\t\t.catch(err => {\n\n\t\t\td.reject(err);\n\n\t\t})\n\n\treturn d.promise;\n\n\n\n}\nservice.morxspc = spec;\nmodule.exports = service;\n"]},"metadata":{},"sourceType":"script"}